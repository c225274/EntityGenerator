/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ak;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/**
 *
 * @author pujan
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Entity Generator");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(928, 400));

        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(null);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("User:");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Pass");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("URL:");

        jTextField3.setText("jdbc:oracle:thin:@172.16.220.133:1521/AVADB10G");
        jTextField3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));

        jButton1.setText("1. Fetch Tables");
        jButton1.setPreferredSize(new java.awt.Dimension(140, 30));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("2. Generate");
        jButton2.setPreferredSize(new java.awt.Dimension(140, 30));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList1);

        jTextField4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 153, 153));
        jLabel4.setText("Model:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setBorder(null);
        jScrollPane3.setViewportView(jTextArea2);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel5.setText("Database Tables");

        jLabel6.setForeground(new java.awt.Color(255, 51, 51));

        jLabel7.setText("pujan.srivastava@gmail.com");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel8.setText("Model");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel9.setText("Entity");

        jTextField5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(153, 153, 153));
        jLabel10.setText("Schema:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(51, 51, 51));
        jRadioButton1.setText("Oracle");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(51, 51, 51));
        jRadioButton2.setText("DB2");
        jRadioButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Type:");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jRadioButton3.setForeground(new java.awt.Color(51, 51, 51));
        jRadioButton3.setText("MySQL");
        jRadioButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jRadioButton4.setForeground(new java.awt.Color(51, 51, 51));
        jRadioButton4.setText("Postgresql");
        jRadioButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jRadioButton5.setForeground(new java.awt.Color(51, 51, 51));
        jRadioButton5.setText("Sqlite");
        jRadioButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(171, 234, 250)));
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel4)
                                    .add(jLabel1)
                                    .add(jLabel3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextField4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextField1))
                                        .add(18, 18, 18)
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                    .add(jTextField3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel10)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 99, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel6)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(7, 7, 7)
                                        .add(jLabel8))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel11)
                                        .add(18, 18, 18)
                                        .add(jRadioButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 69, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jRadioButton2)
                                        .add(18, 18, 18)
                                        .add(jRadioButton3)
                                        .add(18, 18, 18)
                                        .add(jRadioButton4)
                                        .add(18, 18, 18)
                                        .add(jRadioButton5)))
                                .add(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(0, 80, Short.MAX_VALUE)
                        .add(jLabel9)
                        .add(604, 604, 604))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane3)
                            .add(jScrollPane1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel5)
                        .add(0, 124, Short.MAX_VALUE))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(jLabel7))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .add(5, 5, 5)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jRadioButton1)
                            .add(jRadioButton2)
                            .add(jLabel11)
                            .add(jRadioButton3)
                            .add(jRadioButton4)
                            .add(jRadioButton5))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(jTextField5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel10))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1)
                            .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2)
                            .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 174, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 514, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(35, 35, 35)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel6))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 800, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 600, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextArea1.setText("");
        jTextArea2.setText("");
        
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

//        String url = "jdbc:oracle:thin:@172.16.220.133:1521/AVADB10G";
//        String username = "EAF_MASTER";
//        String password = "password";
        
//        String url = "jdbc:db2://172.16.220.151:50000/OTPDB";
//        String username = "db2admin";
//        String password = "password";
        
        String url = jTextField3.getText();//"jdbc:oracle:thin:@172.16.220.133:1521/AVADB10G";
        String username = jTextField1.getText();//"EAF_MASTER";
        String password = jTextField2.getText();//"password";
        String schema = jTextField5.getText();
        
        
        if(url.length() < 1 || username.length() < 1|| password.length() < 1 || schema.length() < 1){
            jLabel6.setText("All fields should be filled");
            return;
        }
        
        

        try {
            
            if(url.contains("oracle")){
                Class.forName("oracle.jdbc.driver.OracleDriver");
            }else if(url.contains("db2")){
                Class.forName("com.ibm.db2.jcc.DB2Driver");
            }
            
            
            conn = DriverManager.getConnection(url, username, password);
            DatabaseMetaData md = conn.getMetaData();
            String[] types = {"TABLE"};
            //rs = md.getTables(null, schema, "%", types);
            rs = md.getTables(null, schema, "%", types);

            javax.swing.DefaultListModel model = new javax.swing.DefaultListModel();
            
            while (rs.next()) {
                String str = rs.getString("TABLE_NAME");
                model.addElement(str);
                //jTextArea1.append(str + "\n");
                System.out.println(str);
            }
            
            jList1.setModel(model);
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                conn.close();
            } catch (SQLException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jList1.isSelectionEmpty()){
            jLabel6.setText("Select Table first");
            return;
        }
        jTextArea1.setText("");
        jTextArea2.setText("");
        
        String tablename = jList1.getSelectedValue().toString();
        //jTextArea1.append(tablename + "\n");
        try {
            getConnection(tablename, jTextField4.getText());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        dbtype = "oracle";
        jTextField3.setText("jdbc:oracle:thin:@172.16.220.133:1521/AVADB10G");
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        dbtype = "db2";
        jTextField3.setText("jdbc:db2://172.16.220.151:50000/OTPDB");
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        dbtype = "mysql";
        jTextField3.setText("jdbc:mysql://127.0.0.1:3306/DBNAME");
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        dbtype = "postgresql";
        jTextField3.setText("jdbc:postgresql://127.0.0.1:5432/testdb");
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        dbtype = "sqlite";
        jTextField3.setText("jdbc:sqlite:D:\\bus.db");
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    static String dbtype = "";
    static String tablename = "M_ENTITY";
    static String pk = "ENTITY_ID";
    static String modelName = "EntityM";

    public static Map jdbcm = new HashMap() {
        {
            put("DATE", "Date");
            put("VARCHAR", "String");
            put("VARCHAR2", "String");
            put("LONGVARCHAR", "String");
            put("CHAR", "String");
            put("TIMESTAMP", "Date");
            put("BOOLEAN", "boolean");
            put("BIT", "boolean");
            put("NUMBER", "BigDecimal");
            put("NUMERIC", "BigDecimal");
            put("TINYINT", "byte");
            put("SMALLINT", "short");
        }
    };

    public static void getConnection(String tablename, String modelName) throws ClassNotFoundException, SQLException {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;

        String url = jTextField3.getText();//"jdbc:oracle:thin:@172.16.220.133:1521/AVADB10G";
        String username = jTextField1.getText();//"EAF_MASTER";
        String password = jTextField2.getText();//"password";
        
        

        try {
            
            if(url.contains("oracle")){
                Class.forName("oracle.jdbc.driver.OracleDriver");
                conn = DriverManager.getConnection(url, username, password);
            }else if(url.contains("db2")){
                Class.forName("com.ibm.db2.jcc.DB2Driver");
                conn = DriverManager.getConnection(url, username, password);
            }else if(url.contains("mysql")){
                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection(url+"?user="+username+"&password="+password);
            }else if(url.contains("postgres")){
                Class.forName("org.postgresql.Driver");
                conn = DriverManager.getConnection(url, username, password);
            }else if(url.contains("sqlite")){
                Class.forName("org.sqlite.JDBC");
                conn = DriverManager.getConnection(url);
            }
            
            
	
        
        
            
            

            ps = conn.prepareStatement("SELECT * FROM " + tablename);
            rs = ps.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();

            DatabaseMetaData meta = conn.getMetaData();
            // The Oracle database stores its table names as Upper-Case,
            // if you pass a table name in lowercase characters, it will not work.
            // MySQL database does not care if table name is uppercase/lowercase.
            rs = meta.getPrimaryKeys(null, null, tablename);

            java.util.List list = new java.util.ArrayList();
            while (rs.next()) {
                String columnName = rs.getString("COLUMN_NAME");
                String primarykey = columnName;
                System.out.println("getPrimaryKeys(): columnName=" + columnName);
                pk = primarykey;
                list.add(primarykey);
            }
            if(list.size()>0){
                pk = (String)list.get(0);
            }else{
                pk = "PRIMARY_KEY";
            }
            
            Map m = new HashMap();
            int cnt = 0;
            while (cnt < rsmd.getColumnCount()) {
                ++cnt;
                m.put(rsmd.getColumnName(cnt), rsmd.getColumnTypeName(cnt));
            }
            
            jTextArea1.append("public class " + modelName + "DAOImpl{\n");

            StringBuffer sbmethod = new StringBuffer();

            StringBuffer sbmodel = new StringBuffer();
            sbmodel.append("public class " + modelName + " {\n");

            StringBuffer sbmodelToString = new StringBuffer();
            sbmodelToString.append("@Override\n    public String toString() {\n        return \"" + modelName + "[");

            sbmethod.append("public static ArrayList<" + modelName + "> list"+modelName+"() throws SQLException{\n");
            sbmethod.append("	Connection conn = null;\n");
            sbmethod.append("   PreparedStatement ps = null;\n");
            sbmethod.append("   ResultSet rs = null;\n");
            sbmethod.append("   ArrayList<" + modelName + "> result = new ArrayList<" + modelName + ">();\n");
            sbmethod.append("   try {\n");
            sbmethod.append("	  conn = getConnection();\n");
            sbmethod.append("	  String query = \"SELECT * FROM " + tablename + "\";\n");
            sbmethod.append("	  ps = conn.prepareStatement(query);\n");
            sbmethod.append("	  rs = ps.executeQuery();\n");
            sbmethod.append("     while (rs.next()) {\n");
            sbmethod.append("         " + modelName + " em=new " + modelName + "();\n");

            for (Iterator it = m.entrySet().iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                String item = namingConvert1(key);
                sbmethod.append("         em.set" + item + "(rs.get" + getJavaDbMap(value) + "(\"" + key + "\"));\n");

                sbmodel.append("      " + getJavaDbMap(value) + " " + namingConvert2(key) + ";\n");
                sbmodel.append("      public " + getJavaDbMap(value) + " get" + namingConvert1(key) + "(){\n");
                sbmodel.append("         return " + namingConvert2(key) + ";\n");
                sbmodel.append("      }\n\n");
                sbmodel.append("      public void set" + namingConvert1(key) + "(" + getJavaDbMap(value) + " " + namingConvert2(key) + "){\n");
                sbmodel.append("         this." + namingConvert2(key) + "=" + namingConvert2(key) + ";\n");
                sbmodel.append("      }\n\n");

                sbmodelToString.append(namingConvert2(key) + "=\"+" + namingConvert2(key) + "+\", ");
            }

            sbmethod.append("       result.add(em);\n");
            sbmethod.append("    }\n");
            sbmethod.append("    }catch (SQLException e) {\n");
            sbmethod.append("		e.printStackTrace();\n");
            sbmethod.append("    } finally {\n");
            sbmethod.append("        ps.close();\n");
            sbmethod.append("        rs.close();\n");
            sbmethod.append("        conn.close();\n");
            sbmethod.append("     }\n");
            sbmethod.append("   return result;\n");
            sbmethod.append("}\n");

            System.out.println(sbmethod.toString());
            jTextArea1.append(sbmethod.toString() + "\n");
            

            System.out.println("\n----------------------------------------");
            sbmodelToString.append("]\";\n}\n\n");
            sbmodel.append(sbmodelToString.toString());
            sbmodel.append("}");
            System.out.println(sbmodel.toString());
            jTextArea2.append(sbmodel.toString() + "\n");

            StringBuffer sbcount = new StringBuffer();
            sbcount.append("public static int count"+modelName+"() throws SQLException, ClassNotFoundException {\n"
                    + "        Connection conn = null;\n"
                    + "        PreparedStatement ps = null;\n"
                    + "        ResultSet rs = null;\n"
                    + "        int result = 0;\n"
                    + "        try {\n"
                    + "            conn = getConnection();\n"
                    + "            String query = \"SELECT COUNT(*) FROM " + tablename + " t\";\n"
                    + "            ps = conn.prepareStatement(query);\n"
                    + "            rs = ps.executeQuery();\n"
                    + "            rs.next();\n"
                    + "            result = rs.getInt(1);\n"
                    + "        } catch (SQLException e) {\n"
                    + "            e.printStackTrace();\n"
                    + "        } finally {\n"
                    + "            ps.close();\n"
                    + "            rs.close();\n"
                    + "            conn.close();\n"
                    + "        }\n"
                    + "        return result;\n"
                    + "    }\n\n");

            System.out.println("\n----------------------------------------");
            System.out.println(sbcount.toString());
            jTextArea1.append(sbcount.toString() + "\n");

            StringBuffer sbfindbyid = new StringBuffer();
            sbfindbyid.append("public static " + modelName + " find" + modelName + "(String id) throws SQLException, ClassNotFoundException {\n"
                    + "        Connection conn = null;\n"
                    + "        PreparedStatement ps = null;\n"
                    + "        ResultSet rs = null;\n"
                    + "        " + modelName + " em = null;\n"
                    + "        try {\n"
                    + "            conn = getConnection();\n"
                    + "            String query = \"SELECT * FROM " + tablename + " t WHERE t."+pk+"='\" + id + \"'\";\n"
                    + "            ps = conn.prepareStatement(query);\n"
                    + "            rs = ps.executeQuery();\n"
                    + "            em = new " + modelName + "();\n"
                    + "            while (rs.next()) {\n");

            for (Iterator it = m.entrySet().iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                String item = namingConvert1(key);
                sbfindbyid.append("         em.set" + item + "(rs.get" + getJavaDbMap(value) + "(\"" + key + "\"));\n");
            }

            sbfindbyid.append("            }\n"
                    + "        } catch (SQLException e) {\n"
                    + "            e.printStackTrace();\n"
                    + "        } finally {\n"
                    + "            ps.close();\n"
                    + "            rs.close();\n"
                    + "            conn.close();\n"
                    + "        }\n"
                    + "        return em;\n"
                    + "    }\n\n");

            System.out.println("\n----------------------------------------");
            jTextArea1.append(sbfindbyid.toString());

            StringBuffer sbedit = new StringBuffer();
            sbedit.append("public static void edit("+modelName+" em) throws Exception {\n"
                    + "        Connection conn = null;\n"
                    + "        PreparedStatement ps = null;\n"
                    + "        int parameterIndex = 0;\n"
                    + "        try {\n"
                    + "            conn = getConnection();\n"
                    + "            StringBuffer sql = new StringBuffer(\"\");\n"
                    + "            sql.append(\" UPDATE " + tablename + " SET \");\n");

            // + "            sql.append(\" ENTITY_NAME = '1', UPDATE_DATE = CURRENT_TIMESTAMP, UPDATE_BY = 'SYSTEM' \");\n"
            for (Iterator it = m.entrySet().iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                String item = namingConvert1(key);
                sbedit.append("            sql.append(\" " + key + "=?,\");\n");
            }
            sbedit.setLength(sbedit.length() - 4);
            sbedit.append("\");\n");
            sbedit.append("            sql.append(\" WHERE "+pk+"=?\");\n"
                    + "            String dSql = String.valueOf(sql);\n"
                    + "            ps = conn.prepareStatement(dSql);\n"
                    + "            if (em != null) {\n");

            for (Iterator it = m.entrySet().iterator(); it.hasNext();) {
                Map.Entry entry = (Map.Entry) it.next();
                String key = (String) entry.getKey();//dbcol
                String value = (String) entry.getValue();//dbcol var
                if (pk.equalsIgnoreCase(key)) {
                    continue;
                }
                String item = namingConvert1(key);
                sbedit.append("            ps.set" + getJavaDbMap(value) + "(++parameterIndex,em.get" + item + "());\n");
            }
            sbedit.append("            ps.set" + getJavaDbMap(pk) + "(++parameterIndex,em.get" + namingConvert1(pk) + "());\n");
            sbedit.append("                ps.executeUpdate();\n"
                    + "            }\n"
                    + "        } catch (Exception e) {\n"
                    + "            System.out.println(\"ERROR\" + e);\n"
                    + "        } finally {\n"
                    + "            ps.close();\n"
                    + "            conn.close();\n"
                    + "        }\n"
                    + "    }\n\n");

            System.out.println("\n----------------------------------------");
            jTextArea1.append(sbedit.toString());

            StringBuffer sbdestroy = new StringBuffer();
            sbdestroy.append("public static void destroy(String id) throws ClassNotFoundException, SQLException {\n"
                    + "        Connection conn = null;\n"
                    + "        PreparedStatement ps = null;\n"
                    + "        ResultSet rs = null;\n"
                    + "        try {\n"
                    + "            conn = getConnection();\n"
                    + "            String query = \"DELETE FROM " + tablename + " t WHERE t."+pk+"='\" + id + \"'\";\n"
                    + "            ps = conn.prepareStatement(query);\n"
                    + "            rs = ps.executeQuery();\n"
                    + "        } catch (SQLException e) {\n"
                    + "            e.printStackTrace();\n"
                    + "        } finally {\n"
                    + "            ps.close();\n"
                    + "            rs.close();\n"
                    + "            conn.close();\n"
                    + "        }\n"
                    + "    }\n\n}");

            System.out.println("\n----------------------------------------");
            jTextArea1.append(sbdestroy.toString());
            
            StringBuffer sbtemp = new StringBuffer();
            sbtemp.append("public static Connection getConnection() {\n"
                    + "        try {\n"
                    + "			// Connection conn =\n"
                    + "            // DriverManager.getConnection(\"jdbc:oracle:thin:@172.16.220.129:1521/AVADB10G\",\n"
                    + "            // \"EAF_MASTER\", \"password\");\n"
                    + "            InitialContext ct = new InitialContext();\n"
                    + "            DataSource ds = (DataSource) ct.lookup(\"java:/jdbc/master\");\n"
                    + "            return ds.getConnection();\n"
                    + "        } catch (Exception e) {\n"
                    + "            e.printStackTrace();\n"
                    + "        }\n"
                    + "        return null;\n"
                    + "    }");

            jTextArea1.append(sbtemp.toString());
            
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            rs.close();
            ps.close();
            conn.close();
        }
    }

    public static String namingConvert1(String input) {
        input = input.toLowerCase();
        String output = "";

        if (!input.contains("_")) {
            for (int i = 0; i < input.length(); i++) {
                if (i == 0) {
                    output = output + String.valueOf(input.charAt(i)).toUpperCase();
                } else {
                    output = output + String.valueOf(input.charAt(i));
                }
            }
            return output;
        }

        String[] strArr = input.split("_");

        for (String s : strArr) {
            for (int i = 0; i < s.length(); i++) {
                if (i == 0) {
                    output = output + String.valueOf(s.charAt(i)).toUpperCase();
                } else {
                    output = output + String.valueOf(s.charAt(i));
                }
            }
        }
        return output;
    }

    public static String namingConvert2(String input) {
        input = input.toLowerCase();
        String output = "";

        if (!input.contains("_")) {
            for (int i = 0; i < input.length(); i++) {
                output = output + String.valueOf(input.charAt(i));
            }
            return output;
        }

        String[] strArr = input.split("_");

        for (int cnt = 0; cnt < strArr.length; cnt++) {
            for (int i = 0; i < strArr[cnt].length(); i++) {
                if (cnt == 0) {
                    output = output + String.valueOf(strArr[cnt].charAt(i));
                } else {
                    if (i == 0) {
                        output = output + String.valueOf(strArr[cnt].charAt(i)).toUpperCase();
                    } else {
                        output = output + String.valueOf(strArr[cnt].charAt(i));
                    }
                }

            }
        }
        return output;
    }

    public static String getJavaDbMap(String in) {
        String result = (String) jdbcm.get(in);
        if (result == null) {
            return "String";
        }
        return result;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.ButtonGroup buttonGroup2;
    private static javax.swing.ButtonGroup buttonGroup3;
    private static javax.swing.ButtonGroup buttonGroup4;
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabel10;
    private static javax.swing.JLabel jLabel11;
    private static javax.swing.JLabel jLabel2;
    private static javax.swing.JLabel jLabel3;
    private static javax.swing.JLabel jLabel4;
    private static javax.swing.JLabel jLabel5;
    private static javax.swing.JLabel jLabel6;
    private static javax.swing.JLabel jLabel7;
    private static javax.swing.JLabel jLabel8;
    private static javax.swing.JLabel jLabel9;
    private static javax.swing.JList jList1;
    private static javax.swing.JPanel jPanel1;
    private static javax.swing.JRadioButton jRadioButton1;
    private static javax.swing.JRadioButton jRadioButton2;
    private static javax.swing.JRadioButton jRadioButton3;
    private static javax.swing.JRadioButton jRadioButton4;
    private static javax.swing.JRadioButton jRadioButton5;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextArea jTextArea2;
    private static javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField jTextField2;
    private static javax.swing.JTextField jTextField3;
    private static javax.swing.JTextField jTextField4;
    private static javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
